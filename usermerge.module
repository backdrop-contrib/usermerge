<?php
/**
 * @file
 * Main file for the User Merge module.
 *
 */

/**
 * Implements hook_permission().
 */
function usermerge_permission() {
  return array(
    'merge accounts' => array(
      'title' => t('merge accounts'),
      'description' => t('Merge accounts'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function usermerge_menu() {
  $items['admin/people/merge'] = array(
    'title' => 'Merge accounts',
    'page callback' => 'usermerge_page',
    'access callback' => 'user_access',
    'access arguments' => array('merge accounts'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Loads includes before calling drupal_get_form().
 *
 * @see usermerge_merge_form()
 */
function usermerge_page() {
  usermerge_load_includes();

  return drupal_get_form('usermerge_merge_form');
}

/**
 * Form to collect the two user IDs.
 */
function usermerge_merge_form($form, &$form_state) {
  if ( !empty($form_state['form_page']) && $form_state['form_page'] == 'review_table' ) {
    return usermerge_data_review_form($form, $form_state);
  }

  // This is necessary, otherwise the title will show up as "People"
  drupal_set_title(t('Merge accounts'));

  $form['supported_actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Supported actions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['supported_actions']['list'] = array(
    '#theme' => 'item_list',
    '#type' => 'ul',
  );

  $supported_actions = module_invoke_all('usermerge_actions_supported', array());
  
  ksort($supported_actions);

  $form['supported_actions']['list']['#items'] = $supported_actions;

  $form['general']['usermerge_user_delete'] = array(
    '#type' => 'textfield',
    '#title' => t('The name of the account you want to remove'),
    '#autocomplete_path' => 'user/autocomplete',
    '#required' => TRUE,
  );

  $form['general']['usermerge_user_keep'] = array(
    '#type' => 'textfield',
    '#title' => t('The name of the account you want to keep'),
    '#autocomplete_path' => 'user/autocomplete',
    '#required' => TRUE,
  );

  $form['general']['usermerge_user_delete_action'] = array(
    '#type' => 'select',
    '#title' => t('Action to perform on the account you want to remove'),
    '#options' => array(
      'block' => t('Block'),
      'delete' => t('Delete')
    ),
    '#default_value' => 'block',
  );

  $form['general']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Review account data'),
    '#submit' => array('usermerge_merge_form_submit')
  );

  return $form;
}

/**
 * Form that allows the selection of data to be merged.
 */
function usermerge_data_review_form($form, &$form_state) {
  drupal_set_title(t('Merge accounts: review account data'));

  $user_to_delete = $form_state['values']['user_to_delete'];
  $user_to_keep = $form_state['values']['user_to_keep'];

  // Invoke hook_usermerge_account_properties
  $account_properties = module_invoke_all('usermerge_account_properties', $user_to_delete, $user_to_keep);
  // Allow modules to alter pre-existing account properties
  drupal_alter('usermerge_account_properties', $account_properties, $user_to_delete, $user_to_keep);

  $form['review'] = module_invoke_all('usermerge_build_review_form_elements', array(), $account_properties, $user_to_delete, $user_to_keep);

  $form['review']['#type'] = 'container';
  $form['review']['#tree'] = TRUE;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Merge accounts')
  );

  $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Cancel'), 'admin/people/merge')
  );

  return $form;
}

/**
 * Implements hook_theme().
 */
function usermerge_theme() {
  $theme['usermerge_data_review_form_table'] = array(
    'render element' => 'element'
  );

  return $theme;
}

/**
 * Returns HTML for each data-review table.
 */
function theme_usermerge_data_review_form_table($variables) {
  $element = $variables['element'];

  $table = array(
    'header' => array(
      'property_name' => isset($element['#attributes']['property_label']) ? $element['#attributes']['property_label'] : t('Property'),
      'user_to_delete' => t('User to delete'),
      'user_to_keep' => t('User to keep'),
    )
  );

  if ( !in_array('no_merge', $element['#attributes']) ) {
    $table['header']['merge'] = t('Merge');
  }

  foreach ( element_children($element) as $id ) {
    $table['rows'][$id]['property_name'] = '<strong>' . drupal_render($element[$id]['property_name']) . '</strong>';
    $table['rows'][$id]['user_to_delete'] = drupal_render($element[$id]['options']['user_to_delete']);
    $table['rows'][$id]['user_to_keep'] = drupal_render($element[$id]['options']['user_to_keep']);

    if ( isset($table['header']['merge']) ) {
      if ( isset($element[$id]['options']['merge']) ) {
        // Case 'force_select' or 'no_merge'
        $table['rows'][$id]['merge'] = '';

        // Case 'merge'
        if ( $element[$id]['options']['#options']['merge'] == 'merge' ) {
          $element[$id]['options']['merge']['#title'] = t('Merge data');
          $table['rows'][$id]['merge'] = drupal_render($element[$id]['options']['merge']);

        }
      }
    }
  }

  if ( isset($element['#description']) ) {
    $description = "<p>" . $element['#description'] . "</p>\n";
  }
  else {
    $description = '';
  }

  return '<h3>' . $element['#title'] . "</h3>\n" . $description . theme('table', $table);
}

/**
 * Validates contents of form for user validation.
 */
function usermerge_merge_form_validate($form, &$form_state) {
  // Validate first step
  if ( !isset($form_state['form_page']) ) {
    // Can't be the same user.
    if ($form_state['values']['usermerge_user_keep'] == $form_state['values']['usermerge_user_delete']) {
      form_set_error('usermerge_user', 'You cannot have the same username in both fields.');
    }

    // Load up the users. We store these in the form_state['values'] so that we don't have to load again later.
    $form_state['values']['user_to_delete'] = array_shift(user_load_multiple(array(), array('name' => $form_state['values']['usermerge_user_delete'])));
    $form_state['values']['user_to_keep'] = array_shift(user_load_multiple(array(), array('name' => $form_state['values']['usermerge_user_keep'])));

    // Use the validate helper function.
    usermerge_validate_merge($form_state['values']['user_to_delete'], $form_state['values']['user_to_keep']);
  }
}

/**
 * Helper validation function used by the form submit and the API.
 *
 * @param $user_to_delete
 *   Object of user to be deleted
 * @param $user_to_keep
 *   Object of user to be kept
 */
function usermerge_validate_merge($user_to_delete, $user_to_keep) {
  $valid = TRUE;
  if (empty($user_to_delete->uid)) {
    form_set_error('usermerge_user_delete', 'This user name does not exist.');
    $valid = FALSE;
  }

  if (empty($user_to_keep->uid)) {
    form_set_error('usermerge_user_keep', 'This user name does not exist.');
    $valid = FALSE;
  }

  // Don't remove UID 1.
  if ($user_to_delete->uid == 1) {
    form_set_error('usermerge_user_delete', 'Blocking user 1 is not allowed.');
    $valid = FALSE;
  }
  return $valid;
}


/**
 * Displays the userdata-review form, or merges the selected accounts.
 */
function usermerge_merge_form_submit($form, &$form_state) {
  if ( !isset($form_state['form_page']) ) {
    $form_state['page_values']['merge_form'] = $form_state['values'];

    if ( !empty($form_state['page_values']['review_table']) ) {
      $form_state['values'] = $form_state['page_values']['review_table'];
    }

    $form_state['form_page'] = 'review_table';
    $form_state['rebuild'] = TRUE;
  }
  else {
    $form_state['values']['usermerge_user_delete_action'] = $form_state['page_values']['merge_form']['usermerge_user_delete_action'];
    usermerge_merge_accounts($form_state['page_values']['merge_form']['user_to_delete'], $form_state['page_values']['merge_form']['user_to_keep'], $form_state['values']);
  }
}

/**
 * Merges the selected accounts.
 *
 * @param object $user_to_delete
 *   A fully loaded user object from user_load() that will be merged and blocked or deleted.
 * @param object $user_to_keep
 *   A fully loaded user object from user_load() that will be merged and retained.
 * @param $form_values
 *   The values from the submitted data-review form.
 * @return boolean
 *   TRUE if they are merged, FALSE if the validation failed.
 */
function usermerge_merge_accounts($user_to_delete, $user_to_keep, $form_values) {
  // Load includes
  usermerge_load_includes();

  if (usermerge_validate_merge($user_to_delete, $user_to_keep)) {
    $merged_account = module_invoke_all('usermerge_merge_accounts', $user_to_delete, $user_to_keep, $form_values['review']);

    // This allows modules to modify the array without merging values
    drupal_alter('usermerge_merge_accounts_alter', $merged_account, $user_to_delete, $user_to_keep);

    $merged_account = (object) $merged_account;

    // Save $merged_account
    $merged_account->pass = $user_to_keep->pass;
    $merged_account->status = 1;

    // Block or delete old account
    switch ( $form_values['usermerge_user_delete_action'] ) {
      case 'block' :
        user_block_user_action($user_to_delete);
      break;

      case 'delete' :
        user_delete($user_to_delete->uid);
      break;
    }

    // Save merged account
    user_save($merged_account);

    drupal_set_message(t('%user_to_delete was successfully merged into %user_to_keep', array('%user_to_delete' => $user_to_delete->name, '%user_to_keep' => $user_to_keep->name)));
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_hook_info().
 */
function usermerge_hook_info() {
  $hooks = array(
    'usermerge_actions_supported' => array(
      'group' => 'usermerge'
    ),
    'usermerge_account_properties' => array(
      'group' => 'usermerge'
    ),
    'usermerge_account_properties_alter' => array(
      'group' => 'usermerge'
    ),
    'usermerge_build_review_form_elements' => array(
      'group' => 'usermerge'
    ),
    'usermerge_merge_accounts' => array(
      'group' => 'usermerge'
    ),
    'usermerge_merge_accounts_alter' => array(
      'group' => 'usermerge'
    )
  );

  return $hooks;
}

/**
 * Calls supplemental includes.
 */
function usermerge_load_includes() {
  foreach ( module_list() as $module ) {
    module_load_include('inc', 'usermerge', 'includes/' . $module . '.usermerge');
  }
}