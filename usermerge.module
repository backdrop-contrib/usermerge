<?php
/**
 * @file
 * Main file for the User Merge module.
 */

/**
 * Implements hook_permission().
 */
function usermerge_permission() {
  return array(
    'administer usermerge settings' => array(
      'title' => t('Administer User Merge settings'),
    ),
    'merge accounts' => array(
      'title' => t('Merge accounts'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function usermerge_menu() {

  $items['admin/config/people/usermerge'] = array(
    'title' => 'User Merge',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('usermerge_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer usermerge settings'),
    'file' => 'usermerge.admin.inc',
  );

  $items['admin/people/merge'] = array(
    'title' => 'Merge accounts',
    'page callback' => 'usermerge_page',
    'access callback' => 'user_access',
    'access arguments' => array('merge accounts'),
    'file' => 'usermerge.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function usermerge_theme() {
  $theme['usermerge_data_review_form_table'] = array(
    'render element' => 'element',
  );

  return $theme;
}


/**
 * Returns HTML for each data-review table.
 */
function theme_usermerge_data_review_form_table($variables) {
  $element = $variables['element'];

  $table = array(
    'header' => array(
      'property_name' => isset($element['#attributes']['property_label']) ? $element['#attributes']['property_label'] : t('Property'),
      'user_to_delete' => t('User to remove'),
      'user_to_keep' => t('User to keep'),
    ),
  );

  if (!in_array('no_merge', $element['#attributes'])) {
    $table['header']['merge'] = t('Merge');
  }

  foreach (element_children($element) as $id) {
    $table['rows'][$id]['property_name'] = '<strong>' . backdrop_render($element[$id]['property_name']) . '</strong>';
    $table['rows'][$id]['user_to_delete'] = backdrop_render($element[$id]['options']['user_to_delete']);
    $table['rows'][$id]['user_to_keep'] = backdrop_render($element[$id]['options']['user_to_keep']);

    if (isset($table['header']['merge'])) {
      if (isset($element[$id]['options']['merge'])) {
        // Case 'force_select' or 'no_merge'
        $table['rows'][$id]['merge'] = '';

        // Case 'merge'
        if ($element[$id]['options']['#options']['merge'] == 'merge') {
          $element[$id]['options']['merge']['#title'] = t('Merge data');
          $table['rows'][$id]['merge'] = backdrop_render($element[$id]['options']['merge']);
        }
      }
    }
  }

  if (empty($table['rows'])) {
    return '';
  }
  return '<h3>' . $element['#title'] . "</h3>\n" .
    (isset($element['#description']) ? "<p>" . $element['#description'] . "</p>\n" : '') .
    theme('table', $table);
}


/**
 * Merges two accounts automatically, making decisions on which data should
 * be preserved.
 *
 * Modules that need to implement a straightforward way to merge accounts should
 * use this function.
 *
 * @param object $user_to_delete
 *   A fully loaded user object from user_load() that will be merged and blocked or deleted.
 * @param object $user_to_keep
 *   A fully loaded user object from user_load() that will be merged and retained.
 */
function usermerge_do($user_to_delete, $user_to_keep) {
  // Build (but not display) data-review form
  usermerge_load_includes();
  $review_form_state['values']['user_to_delete'] = $user_to_delete;
  $review_form_state['values']['user_to_keep'] = $user_to_keep;

  // This allows to call the data-review table instead of the account-selection form
  $review_form_state['form_page'] = 'review_table';
  $review_form = usermerge_merge_form(array(), $review_form_state);

  // Build form values
  // This makes a few assumptions on modules' behavior. It would be advisable to
  // make the User Merge API documentation clearer on what modules should do.
  $review_form_state['page_values']['merge_form'] = $review_form_state['values'];
  $review = array_intersect_key($review_form['review'], array_flip(element_children($review_form['review'])));

  foreach ($review as $component => $items) {
    if (isset($items['#value'])) {
      $review_form_state['values'][$component] = $items['#value'];
    }
    else {
      $items = array_intersect_key($items, array_flip(element_children($items)));

      foreach ($items as $name => $properties) {

        if (isset($properties['options']['#options'])) {
          // If the property has a merge options, merge data
          if (isset($properties['options']['#options']['merge']) && $properties['options']['#options']['merge'] == 'merge') {
            $review_form_state['values']['review'][$component][$name]['options'] = 'merge';
          }
          // Otherwise use data from account to keep
          else {
            $review_form_state['values']['review'][$component][$name]['options'] = 'user_to_keep';
          }
        }
        else {
          // If there are no set options, check if the module sets other form fields
          unset($properties['property_name'], $properties['options']);

          if (count($properties)) {
            foreach ($properties as $property_name => $property) {
              if (isset($property['#value'])) {
                $review_form_state['values']['review'][$component][$name][$property_name] = $property['#value'];
              }
            }
          }
        }
      }
    }
  }

  // Merge accounts
  // Force-delete old account
  $review_form_state['page_values']['merge_form']['usermerge_user_delete_action'] = 'delete';
  backdrop_form_submit('usermerge_merge_form', $review_form_state);
}


/**
 * Implements hook_hook_info().
 */
function usermerge_hook_info() {
  $hooks = array(
    'usermerge_actions_supported' => array(
      'group' => 'usermerge',
    ),
    'usermerge_account_properties' => array(
      'group' => 'usermerge',
    ),
    'usermerge_account_properties_alter' => array(
      'group' => 'usermerge',
    ),
    'usermerge_build_review_form_elements' => array(
      'group' => 'usermerge',
    ),
    'usermerge_merge_accounts' => array(
      'group' => 'usermerge',
    ),
    'usermerge_merge_accounts_alter' => array(
      'group' => 'usermerge',
    ),
  );

  return $hooks;
}


/**
 * Calls all includes.
 *
 * Ideally, this function should call only supplemental includes provided by
 * the module itself, but supplemental includes conflict with includes provided
 * by other modules, making the whole module unreliable quite randomly.
 */
function usermerge_load_includes() {
  foreach (module_list() as $module) {
    // Load MODULE.usermerge.inc files
    if (!($file = module_load_include('inc', $module, $module . '.usermerge'))) {
      // Load supplemental includes only if the module doesn't provide its own implementation
      $file = module_load_include('inc', 'usermerge', 'includes/' . $module . '.usermerge');
    }
  }
}


/**
 * Invokes a hook in all enabled modules that implement it.
 *
 * Replaces module_invoke_all() and bypasses the cache.
 */
function usermerge_invoke_all($hook) {
  usermerge_load_includes();

  $args = func_get_args();
  // Remove $hook from the arguments.
  unset($args[0]);
  $return = array();
  foreach (usermerge_module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $result = call_user_func_array($function, $args);
      if (isset($result) && is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}


/**
 * Determines which modules are implementing a hook.
 *
 * Replaces module_implements().
 * Does not need to load includes, because they should all have already
 * been loaded in usermerge_invoke_all().
 */
function usermerge_module_implements($hook) {
  $modules = array();

  foreach (module_list() as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $modules[] = $module;
    }
  }

  return $modules;
}


/**
 * Implements hook_config_info().
 */
function usermerge_config_info() {
  $prefixes['usermerge.settings'] = array(
    'label' => t('User Merge settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
